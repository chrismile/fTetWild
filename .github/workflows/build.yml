# BSD 3-Clause License
# 
# Copyright (c) 2024, Christoph Neuhauser
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# 
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  generate:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets.
          - os: ubuntu-22.04
            target_name: x86_64-linux
            shell: bash
          - os: ubuntu-24.04
            target_name: x86_64-linux-u2404
            shell: bash
          - os: ubuntu-22.04
            target_name: aarch64-linux
            shell: bash
          # Windows targets.
          - os: windows-2022
            target_name: x86_64-windows
            shell: 'bash -el {0}'
           MinGW build is not supported by fTetWild.
          - os: windows-2022
            target_name: x86_64-windows-gnu
            shell: 'msys2 {0}'

    name: "${{ github.workflow }} target ${{ matrix.target_name }}"
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
      - uses: actions/checkout@v2

      - uses: msys2/setup-msys2@v2
        if: matrix.target_name == 'x86_64-windows-gnu'
        with:
          update: true

      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          activate-environment: ftetwild
          python-version: 3.12

      - name: Build target
        run: |
          CMAKE_ARGS=()
          if [ "$RUNNER_OS" == "Linux" ]; then
              if [ "${{ matrix.target_name }}" == "aarch64-linux" ]; then
                  # https://askubuntu.com/questions/1307659/arm64-multi-arch-docker-build-fails-on-apt-update/1307721#1307721
                  sudo dpkg --add-architecture arm64
                  sudo bash -c 'sed -i "s/deb h/deb [arch=amd64] h/g" /etc/apt/sources.list'
                  sudo bash -c 'echo "# arm64 repositories" >> /etc/apt/sources.list'
                  release_codename="$(lsb_release -cs)"
                  sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${release_codename} main restricted" >> /etc/apt/sources.list'
                  sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${release_codename}-updates main restricted" >> /etc/apt/sources.list'
                  sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${release_codename} universe" >> /etc/apt/sources.list'
                  sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${release_codename}-updates universe" >> /etc/apt/sources.list'
                  sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${release_codename} multiverse" >> /etc/apt/sources.list'
                  sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${release_codename}-updates multiverse" >> /etc/apt/sources.list'
                  sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${release_codename}-backports main restricted universe multiverse" >> /etc/apt/sources.list'
                  sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${release_codename}-security main restricted" >> /etc/apt/sources.list'
                  sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${release_codename}-security universe" >> /etc/apt/sources.list'
                  sudo bash -c 'echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${release_codename}-security multiverse" >> /etc/apt/sources.list'
                  sudo apt update
                  sudo apt install -y g++-aarch64-linux-gnu libc6-dev-arm64-cross libgmp-dev:arm64 patchelf:arm64 qemu-user-static
                  CMAKE_ARGS+=(-DCMAKE_TOOLCHAIN_FILE="cmake/aarch64-linux-gnu.toolchain.cmake")
              else
                  sudo apt install -y libgmp-dev patchelf
              fi
          fi
          if [ "${{ matrix.target_name }}" == "x86_64-windows" ]; then
              export CONDA_ALWAYS_YES="true"
              conda install -c conda-forge mpir
              export GMP_INC=$CONDA_PREFIX/Library/include
              export GMP_LIB=$CONDA_PREFIX/Library/lib
          fi
          if [ "${{ matrix.target_name }}" == "x86_64-windows-gnu" ]; then
              pacman --noconfirm -S --needed make mingw64/mingw-w64-x86_64-cmake mingw64/mingw-w64-x86_64-gcc \
              mingw-w64-x86_64-ntldd mingw64/mingw-w64-x86_64-gmp
              CMAKE_ARGS+=(-G "MSYS Makefiles")
          fi
          if [ "$RUNNER_OS" == "macOS" ]; then
              brew install gmp
          fi
          cmake . -B build -DCMAKE_BUILD_TYPE=Release ${CMAKE_ARGS[@]+"${CMAKE_ARGS[@]}"}
          cmake --build build --config Release

      - name: Copy files
        run: |
          proj_name=${{ github.event.repository.name }}
          exec_name=FloatTetwild_bin
          mkdir dist
          mkdir dist/bin
          mkdir dist/docs
          mkdir dist/include
          mkdir dist/lib
          mkdir dist/lib/cmake
          mkdir dist/lib/cmake/${proj_name}
          if [ "$RUNNER_OS" == "Windows" ]; then
              if [ "${{ matrix.target_name }}" == "x86_64-windows-gnu" ]; then
                  cp "build/${exec_name}.exe" "dist/bin/"
              else
                  cp "build/Release/${exec_name}.exe" "dist/bin/"
              fi
          else
              cp "build/${exec_name}" "dist/bin/"
          fi
          cp "README.md" "dist/docs"
          cp "LICENSE.MPL2" "dist/docs/LICENSE"
          cp "LICENSE-gmp.txt" "dist/docs/LICENSE-gmp.txt"
          cp "3rdparty/cli11/LICENSE" "dist/docs/LICENSE-cli11.txt"
          cp "3rdparty/fmt/LICENSE.rst" "dist/docs/LICENSE-fmt.txt"
          cp "3rdparty/geogram/LICENSE" "dist/docs/LICENSE-geogram.txt"
          cp "3rdparty/json/LICENSE.MIT" "dist/docs/LICENSE-json.txt"
          cp "3rdparty/libigl/LICENSE.MPL2" "dist/docs/LICENSE-libigl.txt"
          cp "3rdparty/spdlog/LICENSE" "dist/docs/LICENSE-spdlog.txt"
          cp "3rdparty/tbb/LICENSE" "dist/docs/LICENSE-tbb.txt"
          cp "cmake/${proj_name}Config.cmake" "dist/lib/cmake/${proj_name}/"
          cp src/*.h dist/include/
          cp src/*.hpp dist/include/
          if [ "$RUNNER_OS" == "Linux" ]; then
              cp "build/libFloatTetwild.a" dist/lib/
          elif [ "$RUNNER_OS" == "Windows" ]; then
              if [ "${{ matrix.target_name }}" == "x86_64-windows-gnu" ]; then
                  cp "build/libFloatTetwild.a" dist/lib/
              else
                  cp "build/Release/FloatTetwild.lib" dist/lib/
              fi
          fi
          # Copy GMP libraries.
          if [ "$RUNNER_OS" == "Linux" ]; then
              cp "$(ldd "build/${exec_name}" | grep libgmp | awk '{print $3}')" dist/bin/
              if [ "${{ matrix.target_name }}" == "aarch64-linux" ]; then
                  qemu-aarch64-static patchelf --set-rpath '$ORIGIN' "dist/bin/${exec_name}"
              else
                  patchelf --set-rpath '$ORIGIN' "dist/bin/${exec_name}"
              fi
          fi
          if [ "${{ matrix.target_name }}" == "x86_64-windows" ]; then
              cp "$CONDA_PREFIX/Library/bin/gmp.dll" dist/bin/
              cp "$CONDA_PREFIX/Library/bin/mpir.dll" dist/bin/
          fi
          if [ "${{ matrix.target_name }}" == "x86_64-windows-gnu" ]; then
              cp "$(ntldd "build/${exec_name}" | grep libgmp | awk '{print $3}')" dist/bin/
          fi

      - name: Run Example
        run: |
          cd dist/bin
          ./FloatTetwild_bin --input ../../tests/bunny.off --level 0  --stop-energy 200
